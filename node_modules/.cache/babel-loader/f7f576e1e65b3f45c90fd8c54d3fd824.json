{"ast":null,"code":"var _jsxFileName = \"/Users/ronakupadhyaya/Documents/Citation-Frontend/src/Calendar.js\";\nimport React from 'react';\nimport BigCalendar from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nconst localizer = BigCalendar.momentLocalizer(moment);\nexport default class Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.eventStyleGetter = event => {\n      var color = event.color;\n      var style = {\n        backgroundColor: '#FFFFFF',\n        color: color\n      };\n      return {\n        style: style\n      };\n    };\n\n    this.state = {\n      speakerEvents: [],\n      authorEvents: [],\n      selfEvents: [],\n      loading: true\n    };\n  }\n\n  componentWillMount() {\n    const authors = this.props.location.state.authors;\n    fetch(\"http://localhost:8080/Citation-Backend/getSchedule\", {\n      method: 'POST',\n      body: JSON.stringify({\n        authors: authors\n      })\n    }).then(response => response.text()).then(responseText => {\n      const json = JSON.parse(responseText);\n      var speakerEvents = json['Speaker'];\n      var authorEvents = json['Author'];\n      var selfEvents = json['Self'];\n      console.log(speakerEvents);\n      speakerEvents = speakerEvents.map(event => {\n        var newEvent = Object.assign({}, event);\n        newEvent.color = '#2979ff';\n        newEvent.start = new Date(event.start);\n        newEvent.end = new Date(event.end);\n        return newEvent;\n      });\n      authorEvents = authorEvents.map(event => {\n        var newEvent = Object.assign({}, event);\n        newEvent.color = '#00796b';\n        newEvent.start = new Date(event.start);\n        newEvent.end = new Date(event.end);\n        return newEvent;\n      });\n      selfEvents = selfEvents.map(event => {\n        var newEvent = Object.assign({}, event);\n        newEvent.color = '#ff3d00';\n        newEvent.start = new Date(event.start);\n        newEvent.end = new Date(event.end);\n        return newEvent;\n      });\n      console.log(speakerEvents);\n      this.setState({\n        speakerEvents: speakerEvents,\n        authorEvents: authorEvents,\n        selfEvents: selfEvents,\n        loading: false\n      });\n    }).catch(error => {\n      console.log(error);\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          authorEvents = _this$state.authorEvents,\n          speakerEvents = _this$state.speakerEvents,\n          selfEvents = _this$state.selfEvents,\n          loading = _this$state.loading;\n    const events = authorEvents.concat(speakerEvents).concat(selfEvents);\n\n    if (loading) {\n      return false;\n    }\n\n    return React.createElement(BigCalendar, {\n      events: events,\n      localizer: localizer,\n      style: {\n        height: '100vh',\n        width: '100vw'\n      },\n      step: 60,\n      showMultiDayTimes: true,\n      eventPropGetter: this.eventStyleGetter,\n      defaultView: 'agenda',\n      defaultDate: new Date(2019, 6, 26),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/ronakupadhyaya/Documents/Citation-Frontend/src/Calendar.js"],"names":["React","BigCalendar","moment","localizer","momentLocalizer","Calendar","Component","constructor","props","eventStyleGetter","event","color","style","backgroundColor","state","speakerEvents","authorEvents","selfEvents","loading","componentWillMount","authors","location","fetch","method","body","JSON","stringify","then","response","text","responseText","json","parse","console","log","map","newEvent","Object","assign","start","Date","end","setState","catch","error","render","events","concat","height","width"],"mappings":"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","sourcesContent":["import React from 'react';\nimport BigCalendar from 'react-big-calendar'\nimport moment from 'moment'\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n\nconst localizer = BigCalendar.momentLocalizer(moment);\n\n\nexport default class Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      speakerEvents: [],\n      authorEvents: [],\n      selfEvents: [],\n      loading: true,\n    }\n  }\n\n  componentWillMount() {\n    const { authors } = this.props.location.state;\n    fetch(\"http://localhost:8080/Citation-Backend/getSchedule\", {\n    method: 'POST',\n    body: JSON.stringify({\n      authors: authors,\n    })\n  })\n  .then((response) => response.text())\n  .then((responseText) => {\n    const json = JSON.parse(responseText);\n    var speakerEvents = json['Speaker'];\n    var authorEvents = json['Author'];\n    var selfEvents = json['Self'];\n    console.log(speakerEvents);\n    speakerEvents = speakerEvents.map(event => {\n      var newEvent = Object.assign({}, event);\n      newEvent.color = '#2979ff';\n      newEvent.start = new Date(event.start);\n      newEvent.end = new Date(event.end);\n      return newEvent;\n    });\n    authorEvents = authorEvents.map(event => {\n      var newEvent = Object.assign({}, event);\n      newEvent.color = '#00796b';\n      newEvent.start = new Date(event.start);\n      newEvent.end = new Date(event.end);\n      return newEvent;\n    });\n    selfEvents = selfEvents.map(event => {\n      var newEvent = Object.assign({}, event);\n      newEvent.color = '#ff3d00';\n      newEvent.start = new Date(event.start);\n      newEvent.end = new Date(event.end);\n      return newEvent;\n    });\n    console.log(speakerEvents);\n    this.setState({\n      speakerEvents: speakerEvents,\n      authorEvents: authorEvents,\n      selfEvents: selfEvents,\n      loading: false,\n    })\n  })\n  .catch((error) => {\n    console.log(error);\n    this.setState({\n      loading: false,\n    });\n  });\n  }\n\n  eventStyleGetter = (event) => {\n    var color = event.color;\n    var style = {\n        backgroundColor: '#FFFFFF',\n        color: color,\n    };\n    return {\n        style: style\n    };\n  };\n\n  render() {\n    const { authorEvents, speakerEvents, selfEvents, loading } = this.state;\n    const events = authorEvents.concat(speakerEvents).concat(selfEvents);\n\n    if(loading) {\n      return false;\n    }\n\n    return (\n      <BigCalendar\n        events={events}\n        localizer={localizer}\n        style={{height: '100vh', width: '100vw'}}\n        step={60}\n        showMultiDayTimes\n        eventPropGetter={(this.eventStyleGetter)}\n        defaultView={'agenda'}\n        defaultDate={new Date(2019, 6, 26)}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}