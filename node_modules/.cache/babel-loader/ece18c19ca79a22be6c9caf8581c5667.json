{"ast":null,"code":"var _jsxFileName = \"/Users/ronakupadhyaya/Documents/Citation-Frontend/src/Calendar.js\";\nimport React from 'react';\nimport BigCalendar from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nconst localizer = BigCalendar.momentLocalizer(moment);\nexport default class Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.eventStyleGetter = event => {\n      var color = event.color;\n      var style = {\n        backgroundColor: '#FFFFFF',\n        color: color\n      };\n      return {\n        style: style\n      };\n    };\n\n    this.state = {\n      speakerEvents: [],\n      authorEvents: []\n    };\n  }\n\n  componentWillMount() {\n    const authors = this.props.location.state.authors;\n    fetch(\"http://localhost:8080/Citation-Backend/getSchedule\", {\n      method: 'POST',\n      body: JSON.stringify({\n        authors: authors\n      })\n    }).then(response => response.text()).then(responseText => {\n      const json = JSON.parse(responseText);\n      var speakerEvents = json['Speaker'];\n      var authorEvents = json['Author'];\n      speakerEvents = speakerEvents.map(event => {\n        var newEvent = Object.assign({}, event);\n        newEvent.color = '#2979ff';\n        return newEvent;\n      });\n      authorEvents = authorEvents.map(event => {\n        var newEvent = Object.assign({}, event);\n        newEvent.color = '#00796b';\n        return newEvent;\n      });\n      console.log(speakerEvents);\n      this.setState({\n        speakerEvents: speakerEvents,\n        authorEvents: authorEvents\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          authorEvents = _this$state.authorEvents,\n          speakerEvents = _this$state.speakerEvents;\n    const events = authorEvents.concat(speakerEvents);\n    return React.createElement(BigCalendar, {\n      events: events,\n      localizer: localizer,\n      style: {\n        height: '100vh',\n        width: '100vw'\n      },\n      step: 60,\n      showMultiDayTimes: true,\n      eventPropGetter: this.eventStyleGetter,\n      defaultView: 'agenda',\n      defaultDate: new Date(2019, 7, 28),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/ronakupadhyaya/Documents/Citation-Frontend/src/Calendar.js"],"names":["React","BigCalendar","moment","localizer","momentLocalizer","Calendar","Component","constructor","props","eventStyleGetter","event","color","style","backgroundColor","state","speakerEvents","authorEvents","componentWillMount","authors","location","fetch","method","body","JSON","stringify","then","response","text","responseText","json","parse","map","newEvent","Object","assign","console","log","setState","catch","error","render","events","concat","height","width","Date"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,mDAAP;AAEA,MAAMC,SAAS,GAAGF,WAAW,CAACG,eAAZ,CAA4BF,MAA5B,CAAlB;AAGA,eAAe,MAAMG,QAAN,SAAuBL,KAAK,CAACM,SAA7B,CAAuC;AACpDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA0CnBC,gBA1CmB,GA0CCC,KAAD,IAAW;AAC5B,UAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;AACA,UAAIC,KAAK,GAAG;AACRC,QAAAA,eAAe,EAAE,SADT;AAERF,QAAAA,KAAK,EAAEA;AAFC,OAAZ;AAIA,aAAO;AACHC,QAAAA,KAAK,EAAEA;AADJ,OAAP;AAGD,KAnDkB;;AAEjB,SAAKE,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE,EADJ;AAEXC,MAAAA,YAAY,EAAE;AAFH,KAAb;AAID;;AAEDC,EAAAA,kBAAkB,GAAG;AAAA,UACXC,OADW,GACC,KAAKV,KAAL,CAAWW,QAAX,CAAoBL,KADrB,CACXI,OADW;AAEnBE,IAAAA,KAAK,CAAC,oDAAD,EAAuD;AAC5DC,MAAAA,MAAM,EAAE,MADoD;AAE5DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBN,QAAAA,OAAO,EAAEA;AADU,OAAf;AAFsD,KAAvD,CAAL,CAMDO,IANC,CAMKC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EANlB,EAODF,IAPC,CAOKG,YAAD,IAAkB;AACtB,YAAMC,IAAI,GAAGN,IAAI,CAACO,KAAL,CAAWF,YAAX,CAAb;AACA,UAAIb,aAAa,GAAGc,IAAI,CAAC,SAAD,CAAxB;AACA,UAAIb,YAAY,GAAGa,IAAI,CAAC,QAAD,CAAvB;AACAd,MAAAA,aAAa,GAAGA,aAAa,CAACgB,GAAd,CAAkBrB,KAAK,IAAI;AACzC,YAAIsB,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBxB,KAAlB,CAAf;AACAsB,QAAAA,QAAQ,CAACrB,KAAT,GAAiB,SAAjB;AACA,eAAOqB,QAAP;AACD,OAJe,CAAhB;AAKAhB,MAAAA,YAAY,GAAGA,YAAY,CAACe,GAAb,CAAiBrB,KAAK,IAAI;AACvC,YAAIsB,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBxB,KAAlB,CAAf;AACAsB,QAAAA,QAAQ,CAACrB,KAAT,GAAiB,SAAjB;AACA,eAAOqB,QAAP;AACD,OAJc,CAAf;AAKAG,MAAAA,OAAO,CAACC,GAAR,CAAYrB,aAAZ;AACA,WAAKsB,QAAL,CAAc;AACZtB,QAAAA,aAAa,EAAEA,aADH;AAEZC,QAAAA,YAAY,EAAEA;AAFF,OAAd;AAID,KA1BC,EA2BDsB,KA3BC,CA2BMC,KAAD,IAAW;AAChBJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD,KA7BC;AA8BD;;AAaDC,EAAAA,MAAM,GAAG;AAAA,wBACiC,KAAK1B,KADtC;AAAA,UACCE,YADD,eACCA,YADD;AAAA,UACeD,aADf,eACeA,aADf;AAEP,UAAM0B,MAAM,GAAGzB,YAAY,CAAC0B,MAAb,CAAoB3B,aAApB,CAAf;AACA,WACE,oBAAC,WAAD;AACE,MAAA,MAAM,EAAE0B,MADV;AAEE,MAAA,SAAS,EAAEtC,SAFb;AAGE,MAAA,KAAK,EAAE;AAACwC,QAAAA,MAAM,EAAE,OAAT;AAAkBC,QAAAA,KAAK,EAAE;AAAzB,OAHT;AAIE,MAAA,IAAI,EAAE,EAJR;AAKE,MAAA,iBAAiB,MALnB;AAME,MAAA,eAAe,EAAG,KAAKnC,gBANzB;AAOE,MAAA,WAAW,EAAE,QAPf;AAQE,MAAA,WAAW,EAAE,IAAIoC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,CARf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAYD;;AArEmD","sourcesContent":["import React from 'react';\nimport BigCalendar from 'react-big-calendar'\nimport moment from 'moment'\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n\nconst localizer = BigCalendar.momentLocalizer(moment);\n\n\nexport default class Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      speakerEvents: [],\n      authorEvents: [],\n    }\n  }\n\n  componentWillMount() {\n    const { authors } = this.props.location.state;\n    fetch(\"http://localhost:8080/Citation-Backend/getSchedule\", {\n    method: 'POST',\n    body: JSON.stringify({\n      authors: authors,\n    })\n  })\n  .then((response) => response.text())\n  .then((responseText) => {\n    const json = JSON.parse(responseText);\n    var speakerEvents = json['Speaker'];\n    var authorEvents = json['Author'];\n    speakerEvents = speakerEvents.map(event => {\n      var newEvent = Object.assign({}, event);\n      newEvent.color = '#2979ff';\n      return newEvent;\n    });\n    authorEvents = authorEvents.map(event => {\n      var newEvent = Object.assign({}, event);\n      newEvent.color = '#00796b';\n      return newEvent;\n    });\n    console.log(speakerEvents);\n    this.setState({\n      speakerEvents: speakerEvents,\n      authorEvents: authorEvents,\n    })\n  })\n  .catch((error) => {\n    console.log(error);\n  });\n  }\n\n  eventStyleGetter = (event) => {\n    var color = event.color;\n    var style = {\n        backgroundColor: '#FFFFFF',\n        color: color,\n    };\n    return {\n        style: style\n    };\n  };\n\n  render() {\n    const { authorEvents, speakerEvents } = this.state;\n    const events = authorEvents.concat(speakerEvents);\n    return (\n      <BigCalendar\n        events={events}\n        localizer={localizer}\n        style={{height: '100vh', width: '100vw'}}\n        step={60}\n        showMultiDayTimes\n        eventPropGetter={(this.eventStyleGetter)}\n        defaultView={'agenda'}\n        defaultDate={new Date(2019, 7, 28)}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}