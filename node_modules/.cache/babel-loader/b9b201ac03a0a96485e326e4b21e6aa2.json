{"ast":null,"code":"var _jsxFileName = \"/Users/ronakupadhyaya/Documents/Citation-Frontend/src/Calendar.js\";\nimport React from 'react';\nimport BigCalendar from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nconst localizer = BigCalendar.momentLocalizer(moment);\nexport default class Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentWillMount() {\n    const authors = this.props.history.state;\n    fetch(\"http://localhost:8080/Citation-Backend/getSchedule\", {\n      method: 'POST',\n      body: JSON.stringify({\n        authors: authors\n      })\n    }).then(response => response.text()).then(responseText => {\n      const json = JSON.parse(responseText);\n      const speakerEvents = json['Speaker'];\n      const authorEvents = json['Author'];\n      console.log(speakerEvents);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  render() {\n    const events = [{\n      start: '2019-07-28T22:05:00.000Z',\n      end: '2019-07-28T22:30:00.000Z',\n      title: 'title'\n    }];\n    return React.createElement(BigCalendar, {\n      events: events,\n      localizer: localizer,\n      style: {\n        height: '100vh',\n        width: '100vw'\n      },\n      step: 60,\n      showMultiDayTimes: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/ronakupadhyaya/Documents/Citation-Frontend/src/Calendar.js"],"names":["React","BigCalendar","moment","localizer","momentLocalizer","Calendar","Component","constructor","props","componentWillMount","authors","history","state","fetch","method","body","JSON","stringify","then","response","text","responseText","json","parse","speakerEvents","authorEvents","console","log","catch","error","render","events","start","end","title","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,mDAAP;AAEA,MAAMC,SAAS,GAAGF,WAAW,CAACG,eAAZ,CAA4BF,MAA5B,CAAlB;AAGA,eAAe,MAAMG,QAAN,SAAuBL,KAAK,CAACM,SAA7B,CAAuC;AACpDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,UAAMC,OAAO,GAAG,KAAKF,KAAL,CAAWG,OAAX,CAAmBC,KAAnC;AACAC,IAAAA,KAAK,CAAC,oDAAD,EAAuD;AAC5DC,MAAAA,MAAM,EAAE,MADoD;AAE5DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBP,QAAAA,OAAO,EAAEA;AADU,OAAf;AAFsD,KAAvD,CAAL,CAMDQ,IANC,CAMKC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EANlB,EAODF,IAPC,CAOKG,YAAD,IAAkB;AACtB,YAAMC,IAAI,GAAGN,IAAI,CAACO,KAAL,CAAWF,YAAX,CAAb;AACA,YAAMG,aAAa,GAAGF,IAAI,CAAC,SAAD,CAA1B;AACA,YAAMG,YAAY,GAAGH,IAAI,CAAC,QAAD,CAAzB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ;AACD,KAZC,EAaDI,KAbC,CAaMC,KAAD,IAAW;AAChBH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,KAfC;AAgBD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAMC,MAAM,GAAG,CACb;AACEC,MAAAA,KAAK,EAAE,0BADT;AAEEC,MAAAA,GAAG,EAAE,0BAFP;AAGEC,MAAAA,KAAK,EAAE;AAHT,KADa,CAAf;AAOA,WACE,oBAAC,WAAD;AACE,MAAA,MAAM,EAAEH,MADV;AAEE,MAAA,SAAS,EAAE5B,SAFb;AAGE,MAAA,KAAK,EAAE;AAACgC,QAAAA,MAAM,EAAE,OAAT;AAAkBC,QAAAA,KAAK,EAAE;AAAzB,OAHT;AAIE,MAAA,IAAI,EAAE,EAJR;AAKE,MAAA,iBAAiB,MALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASD;;AA1CmD","sourcesContent":["import React from 'react';\nimport BigCalendar from 'react-big-calendar'\nimport moment from 'moment'\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n\nconst localizer = BigCalendar.momentLocalizer(moment);\n\n\nexport default class Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentWillMount() {\n    const authors = this.props.history.state;\n    fetch(\"http://localhost:8080/Citation-Backend/getSchedule\", {\n    method: 'POST',\n    body: JSON.stringify({\n      authors: authors,\n    })\n  })\n  .then((response) => response.text())\n  .then((responseText) => {\n    const json = JSON.parse(responseText);\n    const speakerEvents = json['Speaker'];\n    const authorEvents = json['Author'];\n    console.log(speakerEvents);\n  })\n  .catch((error) => {\n    console.log(error);\n  });\n  }\n\n  render() {\n    const events = [\n      {\n        start: '2019-07-28T22:05:00.000Z',\n        end: '2019-07-28T22:30:00.000Z',\n        title: 'title',\n      }\n    ];\n    return (\n      <BigCalendar\n        events={events}\n        localizer={localizer}\n        style={{height: '100vh', width: '100vw'}}\n        step={60}\n        showMultiDayTimes\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}